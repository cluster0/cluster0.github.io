<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git Note]]></title>
    <url>%2F2019%2F04%2F23%2FWiki-Git%2F</url>
    <content type="text"><![CDATA[Git 基础Git 是一个开源的分布式版本控制系统，Linus Torvalds 在 2005 年开发了 Git 的原型程序。Git 目前支持 Linux/Unix、Mac、Windows 平台（安装包下载地址）。基本概念Git 有三种状态，一份文件可能处于其中之一：已提交（committed）：表示数据已经安全保存在本地数据库中。已修改（modified）：表示修改了文件，但还没保存到数据库中。已暂存（staged）：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。Git 项目有三个工作区域：仓库区（repository）：又名版本库，用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，复制的就是这里的数据。工作区（workspace）：对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。暂存区（stage）：保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。在工作区目录下有一个隐藏目录 .git，这个就是 Git 的版本库。在版本库中的 .git/index 目录下就是暂存区，有时也将暂存区叫作索引（index）。基本的 Git 工作流程为：在工作目录中修改文件。暂存文件，将文件的快照放入暂存区域。提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。配置初次运行 Git 前需要进行一些配置。Git 自带一个叫做 git config 的工具用来帮助设置控制 Git 外观和行为的配置变量，这些变量存储在三个不同的位置：/etc/gitconfig 文件：包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system 选项的git config 时，它会从此文件读写配置变量。~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。如果使用带有 --global 选项的 git config 时，从此文件读写配置变量。当前项目工作目录中的 .git/config 文件：此配置仅针对当前项目有效。注意每一个级别会覆盖上一级别的配置，例如 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。首先配置使用 Git 时的用户名和邮箱地址，使用 Git Bash 进入 Shell 并配置信息（这里使用了 --global 选项，修改的配置文件位于用户主目录下，以后所有的项目都会默认使用此处配置的用户信息。）：123456789# 配置 Git 信息git config --global user.name "username"git config --global user.email "useremail@example.com"# 检查已有的配置信息git config --list# 检查某一项配置信息git config &lt;key&gt;帮助1234# 若你使用 Git 时需要获取帮助，有三种方法可以找到 Git 命令的使用手册git help &lt;verb&gt;git &lt;verb&gt; --helpman git-&lt;verb&gt;仓库初始化12345# 将当前目录初始化为一个仓库git init# 新建一个目录并将其初始化为一个仓库git init &lt;directory&gt;添加/移除1234567891011121314151617# 添加指定文件到暂存区git add &lt;file1&gt; &lt;file2&gt;# 添加指定目录到暂存区git add &lt;directory&gt;# 添加当前目录中的所有文件到暂存区git add .# 从暂存区移除文件，并从工作区删除此文件git rm &lt;file1&gt; &lt;file2&gt;# 停止追踪指定文件（即从暂存区移除文件），但该文件会保留在工作区git rm --cached &lt;file&gt;# 文件重命名，并将该文件放入暂存区git mv &lt;file_original&gt; &lt;file_renamed&gt;提交1234567891011121314# 将暂存区提交到仓库区git commit -m &lt;message&gt;# 将暂存区的指定文件提交到仓库区git commit &lt;file1&gt; &lt;file2&gt; -m &lt;message&gt;# 工作区中修改后，Git 提供了一个跳过使用暂存区域的方式，会自动把所有已经跟踪过的文件暂存起来一并提交git commit -a -m &lt;message&gt;# 提交时显示所有差异git commit -v# 使用新的提交信息覆盖上一次提交信息git commit --amend -m &lt;message&gt;状态123456789101112131415161718192021222324252627282930# 显示文件状态git status# 显示工作区中文件和暂存区的差异，即修改之后还没有暂存起来的变化内容git diff# 显示暂存区和上一次提交的差异git diff --cached &lt;file&gt;git diff --staged &lt;file&gt;# 显示工作区与当前分支最新一次提交的差异git diff HEAD# 显示两次提交之间的差异git diff &lt;commit1&gt; &lt;commit2&gt;# 显示两个分支之间的差异git diff &lt;branch1&gt; &lt;branch2&gt;# 显示指定文件修改历史git blame &lt;file&gt;# 显示某次提交的元数据和内容变化git show &lt;commit&gt;# 显示某次提交发生变化的文件git show --name-only &lt;commit&gt;# 显示某次提交的某个文件的内容git show &lt;commit&gt;:&lt;file&gt;历史1234567891011121314151617181920212223242526272829303132# 显示当前分支的提交历史git log# 显示最近 3 次提交git log -3# 显示每次提交的简略统计信息git log --stat# 显示指定文件的每次提交内容差异git log -p &lt;file&gt;# 将每次提交一行显示git log --pretty=oneline# 定制要显示的记录格式git log --pretty=format:"%s - %cd"# 查看分支合并图git log --graph# 根据关键词作者搜索提交历史git log --author="&lt;key&gt;"# 根据关键词提交信息搜索提交历史git log --grep="&lt;key&gt;"# 显示某个文件的版本历史git log --follow &lt;file&gt;# 查看引用日志git reflog忽略文件一般我们会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。在这种情况下，可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。标签Git 可以给历史中的某一个提交打上标签，以示重要。Git 使用两种主要类型的标签：轻量标签（lightweight）与附注标签（annotated）。轻量标签只是一个特定提交的引用。附注标签是存储在 Git 数据库中的一个完整对象，它们是可以被校验的；其中包含打标签者的名字、电子邮件地址、日期时间；还有一个标签信息；并且可以使用 GPG 签名与验证。1234567891011121314151617181920212223242526# 列出已有标签git tag# 新建一个轻量标签git tag &lt;tag&gt;# 新建一个附注标签git tag -a &lt;tag&gt; -m &lt;message&gt;# 在指定提交新建一个标签git tag &lt;tag&gt; &lt;commit&gt;# 删除本地标签git tag -d &lt;tag&gt;# 查看标签信息git show &lt;tag&gt;# 向远程仓库提交指定标签git push &lt;remote&gt; &lt;tag&gt;# 向远程仓库提交所标签git push &lt;remote&gt; --tags# 在特定标签上创建一个新分支git checkout -b &lt;branch&gt; &lt;tag&gt;撤销123456789101112131415161718192021222324252627# 恢复暂存区的指定文件到工作区git checkout &lt;file&gt;# 恢复某次提交的指定文件到暂存区和工作区git checkout &lt;commit&gt; &lt;file&gt;# 恢复暂存区的所有文件到工作区git checkout .# 重置当前分支的 HEAD 为指定提交，但暂存区和工作区不变git reset --soft &lt;commit&gt;# 重置当前分支的 HEAD 为指定提交，同时重置暂存区，但工作区不变git reset --mixed &lt;commit&gt;git reset &lt;commit&gt;# 重置当前分支的 HEAD 为指定提交，同时重置暂存区和工作区git reset --hard &lt;commit&gt;# 重置当前分支的 HEAD 回退三次提交git reset --hard HEAD~3# 重置暂存区的指定文件到上一次提交，但工作区不变git reset &lt;file&gt;# 新建一个提交用来撤销指定 commit。它将 commit 中的变更以完全相反的方式应用到一个新提交中git revert &lt;commit&gt;远程仓库远程仓库是指托管在因特网或其他网络中的你的项目的版本库，同一个 Git 仓库可以分布到不同的机器上。GitHubGitHub 是为开发者提供 Git 仓库的托管服务。GitHub 上连接已有仓库时的认证是通过使用了 SSH 的公开密钥认证方式进行的。我们需要创建公开密钥认证所需的 SSH Key 并将其添加至 GitHub。执行以下命令，这时会有输入密码的提示，此密码会在之后提交项目时使用。若此处不设置密码，则提交项目时不用输入密码。若不设置密码，一直按回车键完成操作即可：1ssh-keygen -t rsa -C "useremail"SSH Key 生成之后会出现两个密匙文件（其中 id_rsa 文件是私钥，id_rsa.pub 文件是公钥），打开 id_rsa.pub 文件，复制其中的密钥。网页登录 GitHub 后点击头像，依次选择 Settings、SSH and GPG keys、New SSH key，将密钥粘贴到 Key 输入框中，点击 Add Key，至此 SSH Key 配置成功。完成配置后就可以用我们的私人密钥与 GitHub 进行认证和通信了，执行命令：1ssh -T git@github.com出现确认信息后输入 yes 然后回车，若出现如下结果即表示成功：1Hi username! You've successfully authenticated, but GitHub does not provide shell access.远程同步1234567891011121314151617181920212223242526# 显示所有已配置的远程仓库git remote -v# 显示某个远程仓库的更多信息git remote show &lt;remote&gt;# 添加一个新的远程仓库并命名git remote add &lt;name&gt; &lt;url&gt;# 拉取远程仓库的数据git fetch &lt;remote&gt;# 拉取远程仓库的数据，并与本地分支合并git pull &lt;remote&gt; &lt;branch&gt;# 更新远程仓库git remote update# 推送本地指定分支到远程仓库git push &lt;remote&gt; &lt;branch&gt;# 即使有冲突，强行推送当前分支到远程仓库git push &lt;remote&gt; --force# 推送所有分支到远程仓库git push &lt;remote&gt; --all克隆通过克隆将默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。克隆时可以使用不同的协议，Git 可以使用四种主要的协议来传输资料：本地协议（Local），HTTP 协议，SSH（Secure Shell）协议及 Git 协议。其中最常用的是 SSH，因为速度较快，还可以配置公钥免输入密码。12345678# SSH 协议git clone git@github.com:user/repo.git# Git 协议git clone git://github.com/user/repo.git# HTTP 协议git clone https://github.com/user/repo.git分支1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# 列出所有本地分支git branch# 查看每一个分支的最后一次提交git branch -v# 列出所有远程分支git branch -r# 列出所有本地分支和远程分支git branch -a# 新建一个分支，但依停留在当前分支git branch &lt;branch&gt;# 切换分支git checkout &lt;branch&gt;# 新建一个分支，并切换到该分支git checkout -b &lt;branch&gt;# 新建一个指向指定提交的分支git branch &lt;branch&gt; &lt;commit&gt;# 新建一个分支，并与指定的远程分支建立追踪关系git branch --track &lt;branch&gt; &lt;remote/branch&gt;# 在已有分支与指定的远程分支之间建立追踪关系git branch --set-upstream-to=&lt;remote/branch&gt; &lt;branch&gt;# 查看设置的所有跟踪分支git branch -vv# 合并指定分支到当前分支git merge &lt;branch&gt;# 合并指定分支到当前分支，禁用 Fast forward 模式git merge --no-ff -m &lt;message&gt; &lt;branch&gt;# 查看已合并到当前分支的其他分支git branch --merged# 查看未合并到当前分支的其他分支git branch --no-merged# 选择一个提交，合并进当前分支git cherry-pick &lt;commit&gt;# 删除分支git branch -d &lt;branch&gt;# 强制删除还未合并的分支git branch -D &lt;branch&gt;# 删除远程分支git push origin --delete &lt;branch&gt;储藏与清理1234567891011121314# 暂时将未提交的修改保存到一个栈上git stash# 查看储藏在栈上的东西git stash list# 恢复工作现场git stash apply# 移除储藏在栈上的东西git stash drop# 恢复工作现场并移除储藏在栈上的东西git stash pop参考资料Git ReferenceLearn Git BranchingGit 教程Update 2019/06/10Update 2019/04/23]]></content>
      <categories>
        <category>Wiki</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Notes on Mathematics and Physics]]></title>
    <url>%2F2019%2F03%2F14%2FNote-Mathematics_and_Physics%2F</url>
    <content type="text"><![CDATA[Nous sommes des enfants, mais des enfants progressifs, pleins de force et de courage.InstructionsSome personal notes on mathematics and physics, you can find more information in here.If you find any errors in these notes, please contact me: &#x7a;&#x68;&#46;&#x7a;&#x6f;&#64;&#x66;&#111;&#x78;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;.ContentsBUILDING …Update LogUpdate 2019/03/14]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Physics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[札记]]></title>
    <url>%2F2019%2F03%2F14%2FNote-Reading%2F</url>
    <content type="text"><![CDATA[我看见阳光下的森林，绿色的植被浑然一体。不久我们将启程开赴，彼此相会在夏日时光。说明阅读笔记，详细内容请见这里。目录搭建中 …更新Update 2019/03/14]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>札记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[法律法规条文]]></title>
    <url>%2F2019%2F03%2F10%2FWiki-Laws_and_regulations%2F</url>
    <content type="text"><![CDATA[法律法规中华人民共和国宪法中华人民共和国刑法中华人民共和国民法通则中华人民共和国未成年人保护法中华人民共和国著作权法中华人民共和国劳动法中华人民共和国消费者权益保护法中华人民共和国婚姻法治安管理处罚法信息网络传播权保护条例网站北大法宝中国法律应用数字网络服务平台中国政府网法律法规Westlaw]]></content>
      <categories>
        <category>Wiki</category>
      </categories>
      <tags>
        <tag>文档</tag>
        <tag>法律</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scientific Computing Tools]]></title>
    <url>%2F2019%2F02%2F28%2FWiki-Scientific_Computing_Tools%2F</url>
    <content type="text"><![CDATA[C/C++ 篇基础1/* 测试 */参考资料C++ 语言Python 篇基础1# 测试参考资料The Python TutorialThe Python Language Referencehttps://blog.zengrong.net/post/2335.htmlhttp://www.pythondoc.com/pythontutorial3/index.htmlMathematica 篇基础变量Mathematica 中变量无需专门定义，在给变量赋值之前，就能对其进行运算。这时 Mathematica 只是将这个变量当作一个代数符号，它可以表示任何值，这时变量的颜色为蓝色。赋值后变量的颜色变成黑色，说明它已经不是一个单纯的代数符号，而是有了自己的含义。1234567891011121314151617181920(*单个变量赋值*)x=value(*多个变量同时赋值*)&#123;x1,x2&#125;=&#123;value1,value2&#125;(*延迟赋值，当被调用时，值会被重新计算，等号右端在规则定义之前不被计算*)x:=value(*清除赋值*)x=.(*清除变量的值但保留变量定义*)Clear[x](*清除变量*)Remove[x](*清除变量的值和定义，同时清除与之关联的属性和信息*)ClearAll模式模式代表表达式的类型，基本的模式结构 _ 可以代表任意表达式。/. 表示全部替代x_ （x:_ 的缩写）代表一个模式，其值被命名为 x:a|b|c 代表 a、b 或 c__（两个 blank）代表任意表达式序列_h 代表任何有标头 h 的表达式:&gt; 是一个延迟规则，类似于规则中的 :=函数在 Wolfram 语言中，函数定义只是给出模式变换规则的赋值。123456789101112131415161718192021222324252627(*定义函数*)f[x_]:=x^2(*定义带有两个参数的函数*)f[x_,y_]:=x+y(*使用 /; 限制定义，使其只适用于某种条件*)f[x_,y_]:=x-y /; x&gt;y(*将函数 f 应用于 x*)f[x]f@xx//f(*函数嵌套*)f[g[x]]f@g@xx//g//f(*将一个函数映射到多个表达式，/@ 是 Map 的简写形式*)Map[f,&#123;a,b,c&#125;]f/@&#123;a,b,c&#125;(*纯函数，也称为匿名函数、Lambda 表达式等，由 &amp; 结尾，第一个参数由 # 指明*)(#+1)&amp;[50]&#123;#2,1+#1,#1+#2&#125;&amp;[a,b]f[#]&amp;[x]快捷键执行指令数字键盘区 Enter字母键盘区 Shift+Enter终止指令进行 Alt+.分数线 Ctrl+/二次根号 Ctrl+2乘方Shift+6 计算机表示Ctrl+6 数学表示输入希腊字母 Esc 字母 Esc注释 (*comment*)字符串12345678910(*字符串用双引号指定*)"..."(*用 &lt;&gt; 连接字符串*)"this" &lt;&gt; "is" &lt;&gt; "aaaa" &lt;&gt; "bbb"(*字符串可以包含任何 Unicode 字符*)\[Alpha]ESC a ESC\:03b1参考资料Wolfram ReferenceWolfram Demonstrations ProjectWolfram BlogMathematica Learning ResourcesMATLAB 篇基础变量MATLAB 中的每个变量都是数组或矩阵。1234567891011121314151617181920212223242526% 删除工作空间内所有的变量，释放系统内存clear% 删除变量 name1，name2，name3clear name1 name2 name3% 清除全局变量 nameclear global name% 清除所有匹配正则表达式 expr1 expr2 的变量clear -regexp expr1 expr2% 清除所有匹配正则表达式 expr1 expr2 的全局变量clear golbal -regexp expr1 expr2% 清空命令行窗口clc% 删除指定图窗close% 删除名为h的参数close(h)% 删除名为name的参数close name矩阵操作1234567891011% 提取矩阵行数与列数% 只用一个参数接受结果时，返回一个行向量，第一个元素代表行数，第二个元素代表列数t=size(A)% r 为行数，c 为列数[r,c]=size(A)% 提取矩阵第一行的所有数据A(1,:)A(1,1:end)A(1,1:size(A,2))参考资料MATLAB DocumentationMATLAB PrimerMATLAB 教程Update 2019/02/28]]></content>
      <categories>
        <category>Wiki</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>Scientific Computing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LaTeX Note]]></title>
    <url>%2F2019%2F02%2F20%2FWiki-LaTeX%2F</url>
    <content type="text"><![CDATA[LaTeX 简介1976 年计算机科学家 Donald E. Knuth 在看到其多卷本巨著《The Art of Computer Programming》的第二卷校样时，对于由计算机排版出来的校样的低质量感到无法忍受，于是决定自己开发一个高质量的计算机排版系统，然后就有了 TeX​。其第一版于 1978 年发布，第二版于 1982 年发布。在 1990 年 TeX​ v3.0 发布之后，Knuth 宣布除了修正 bug 外停止对 TeX​ 的开发，因为他要集中精力完成那本巨著的剩下部分。而此后每发布一个修正版，其版本号就增加一位小数，使得它收敛于 $\pi$（目前是 3.141592653）。用户可以通过定义自己适用的新命令来扩展 TeX 系统的功能。许多人利用 TeX 提供的宏定义功能对 TeX 进行了二次开发，这使得它很强大。但是同时 TeX 又很繁琐，Knuth 提供了一个对 TeX 进行了封装的宏集 plain TeX，里面有一些高级命令。但 plain TeX 还是不够高级，计算机科学家 Leslie Lamport 在上世纪 80 年代初期开发了另一个基于 TeX 的宏集 LaTeX。当前 LaTeX 的开发活动由 The LaTeX Team 接管，他们同时还在进行 LaTeX 3 的开发。利用 LaTeX，即使使用者没有排版和程序设计的知识也可以充分发挥由 TeX 所提供的强大功能，这个系统非常适用于生成高印刷质量的科技和数学类文档，同样适用于生成从简单的信件到完整书籍等所有其他种类的文档。目前的 LaTeX 版本为 LaTeXe，常用的 LaTeX 发行版和编辑器参见表 1.1。操作系统发行版编辑器WindowsTeX Live、MiKTeXWinEid、Sublime TextUnix/LinuxTeX LiveEmacs、 Vim、 Sublime TextMac OSMacTeXTeXShop在使用 LaTeX 的过程中可能还需要其它一些软件以及相关配置，将在后面的相关小节中分别介绍。若想对 LaTeX 有更深入全面的了解，可以参阅 Tobias Oetiker 的《A Not So Short Introduction to LaTeXe》（中文版链接）和 Frank Mittelbach 的《The LaTeX Companion》。此外，这里有必要对几个概念做出解释：引擎：全称为排版引擎，是编译源代码并生成文档的程序，如 pdfTeX​、XeTeX​ 等。有时也称为编译器。格式：定义了一组命令的代码集，如 plain TeX、 LaTeX 。编译命令：实际调用的、结合了引擎和格式的命令，如 xelatex 命令是结合 XeTeX 引擎和 LaTeX 格式的一个编译命令。常见的引擎、格式和编译命令的关系参见表 1.2。文档格式plain TeX 格式LaTeX 格式TeX 引擎DVItexN/ApdfTeX 引擎DVIetexlatexPDFpdftexpdflatexXeTeX 引擎PDFxetexxelatexLuaTeX 引擎PDFluatexlualatex安装步骤流行的 TeX 发行版有 CTeX 、MiKTeX 和 TeX Live 等，一般推荐大家安装 TeX Live 发行版，这是由 TeX Users Group 维护和发布的 TeX 系统。TeX Live 是跨平台的，支持 Unix/Linux、Mac OS、Windows，而且它自带有一款很简单的编辑器 TeXworks（这款编辑器很多发行版都自带）。在安装之后直接运行 TeXworks 就可以进行文本编辑了，操作很简单。下面将具体介绍软件的安装步骤。Mac OSMac 系统上的 TeX Live 发行版是 MacTeX，它在 TeX Live 的基础上增加了原生的 Mac OS 的安装程序和一些其它 Mac 应用程序。你可以从官网下载 MacTeX，或者通过镜像站下载：清华镜像文件、中科大镜像文件，下载完成后直接执行安装包即可。Unix/Linux这里以 Ubuntu16.04 为例进行安装说明。尽管大部分常见的 Unix/Linux 系统的包管理器内都会包含 TeX Live，然而最好还是安装 TUG 发布的原版 TeX Live，因为包管理器内的软件版本通常比较陈旧而且自带的宏包不全，会漏掉很多有用的功能。如果已经安装了其它版本的 TeX Live，需要先将其卸载。卸载方法如下（这里以 TeX Live 2016 为例）：1234567sudo apt-get purge texlive*rm -rf /usr/local/texlive/2016 and rm -rf ~/.texlive2016rm -rf /usr/local/share/texmfrm -rf /var/lib/texmfrm -rf /etc/texmfsudo apt-get remove tex-common --purgerm -rf ~/.texlive卸载完成后就可以进行新版本的安装了，目前最新的软件版本是 TeX Live 2018，你可以从官方站点下载安装包文件，或者通过镜像站下载：清华镜像文件、中科大镜像文件，下载完成后你将得到一个扩展名为 iso 的镜像文件。为了使用图形化安装界面（GUI 模式）进行操作，需要确保系统安装了 Perl/TK 组件，可用以下方法添加：1sudo apt-get install perl-tk然后进入下载目录，挂载镜像文件，并启动安装程序的图形化界面进行配置：123sudo mount -o loop texlive2018.iso /mntcd /mntsudo ./install-tl -gui然后桌面上会出现安装界面。安装方案选项，初级用户推荐直接选择 scheme-full 模式，高级用户可以选择 scheme-custom 进一步定制。Portable setup 选项可以创建一套在一个独立路径下完全自包含的 TeX Live 安装（即一个便携版本），如果要安装到系统里就选择否。安装路径为默认，也可以自行修改，其他选项基本上可以选择默认。注意，如果选择了创建指向系统目录的符号链接（Create symlinks in system directories）这一选项，之后就不用设置环境变量。安装完成后卸载镜像文件：1cd /; sudo umount /mnt如果没有选择创建指向系统目录的符号链接这一选项，完成以上步骤之后还要进行环境变量的配置，Tex Live 默认的安装目录是 /usr/local/texlive/2018/bin/x86_64-linux/。为了让 Shell 能够自动找到其 bin 文件，我们需要修改环境变量 PATH，如果我们希望系统也能够自动找到 Tex Live 的 man 或 info 文档，我们一并修改环境变量 MANPATH 和 INFOPATH。终端执行：1sudo gedit ~/.bashrc然后在打开的文档末尾加添加代码：123PATH=/usr/local/texlive/2018/bin/x86_64-linux:$PATH; export PATHMANPATH=/usr/local/texlive/2018/texmf-dist/doc/man:$MANPATH; export MANPATHINFOPATH=/usr/local/texlive/2018/texmf-dist/doc/info:$INFOPATH; export INFOPATH保存文档后退出，然后测试是否安装成功，终端执行：1tex -version如果正确显示出 TeX Live 版本即表示安装成功。下面进行编译测试，新建一个 test.tex 文件并写入以下代码：1234\documentclass&#123;article&#125;\begin&#123;document&#125;Hello \LaTeX\end&#123;document&#125;在文件所在目录下打开终端并执行：1xelatex test.tex如果安装过程没有什么问题，这时会成功生成相应的文件。至此已经可以进行文档编辑了。如果你想要实现中文排版，接下来还需要进行中文字体配置。XeTeX 和 LuaTeX 可以直接使用系统安装的字体，但 Tex Live 自带的字体并不在系统的字体目录里面。在 Windows 系统下 TeX Live 提供的字体可以自动被 XeTeX 使用，而在 Ubuntu 系统下则需要进行一些配置才能让 XeTeX 找到随 TeX Live 安装的字体。可以将 texlive-fontconfig.conf 文件复制到 /etc/fonts/conf.d/09-texlive.conf，在终端输入：12sudo cp /usr/local/texlive/2018/texmf-var/fonts/conf/texlive-fontconfig.conf /etc/fonts/conf.d/09-texlive.confsudo fc-cache -fsv现在已经可以使用系统字体。为了实现中文排版，我们需要使用 CTeX 宏集，它提供了三个字体选项：nofonts、adobefonts 和 winfonts，默认使用的是 winfonts。如果在 tex 源文件中没有使用其他选项修改字体配置，则需要操作系统中安装有中文 Windows 操作系统自带的字体：宋体、仿宋、黑体、楷体、隶书、幼圆。因此我们需要在 Ubuntu 系统下手动安装这些字体，首先创建一个 WinFonts 文件夹用来存放字体文件，把 Windows 下的六种中易字体文件（宋体 simsun.ttf，仿宋 simfang.ttf，黑体 simhei.ttf，楷体 simkai.ttf，隶书 simli.ttf，幼圆 simyou.ttf）复制到该文件夹并更改权限，终端输入：12sudo mkdir /usr/share/fonts/WinFonts/sudo chmod 777 /usr/share/fonts/WinFonts/然后将字体文件复制到 WinFonts 目录下，之后继续：12345sudo chmod 555 /usr/share/fonts/WinFonts/sudo mkfontscalesudo mkfontdirsudo fc-cache -fsvsudo fc-list :lang=zh-cn这时你会看到终端输出的信息里多出来了你刚刚复制的字体，字体配置完成。然后更新源配置，配置合适的 CTAN 源可以加快宏包更新的速度，以中科大的源为例，终端输入：12sudo tlmgr option repository http://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnetsudo tlmgr update --self --all如果你在输入命令之后返回信息：1sudo: tlmgr: command not found可以使用以下命令解决问题：12sudo env PATH="$PATH" tlmgr option repository http://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnetsudo env PATH="$PATH" tlmgr sudo tlmgr update --self --all更新完成之后需要告诉系统 Tex Live 相关软件包都已经安装好了，这样在系统安装依赖于 TeX 的软件时就不必重新下载软件仓库中的旧版 Tex Live 相关软件，也不会造成不同 TeX 版本之间命令的冲突。Dummy package 就是用来解决这样的软件依赖问题的虚包，制作方式可以参考 TeX Live and Debian/Ubuntu，对于 TeX Live 2018 来说操作如下：123456sudo aptitude install equivssudo mkdir /tmp/tl-equivs &amp;&amp; cd /tmp/tl-equivsequivs-control texlive-local# edit texlive-local (see below)sudo equivs-build texlive-localsudo dpkg -i texlive-local_2018-1_all.deb其中要编辑的部分为：1234567891011121314151617181920212223242526272829303132333435363738394041Section: miscPriority: optionalStandards-Version: 4.1.4Package: texlive-localVersion: 2018-1Maintainer: you &lt;you@yourdomain.example.org&gt;Provides: chktex, biblatex, biblatex-dw, cm-super, cm-super-minimal, context, dvidvi, dvipng, feynmf, fragmaster, jadetex, lacheck, latex-beamer, latex-cjk-all, latex-cjk-chinese, latex-cjk-chinese-arphic-bkai00mp, latex-cjk-chinese-arphic-bsmi00lp, latex-cjk-chinese-arphic-gbsn00lp, latex-cjk-chinese-arphic-gkai00mp, latex-cjk-common, latex-cjk-japanese, latex-cjk-japanese-wadalab, latex-cjk-korean, latex-cjk-thai, latexdiff, latexmk, latex-sanskrit, latex-xcolor, lcdf-typetools, lmodern, luatex, musixtex, passivetex, pgf, preview-latex-style, prosper, ps2eps, psutils, purifyeps, t1utils, tex4ht, tex4ht-common, tex-gyre, texlive, texlive-base, texlive-bibtex-extra, texlive-binaries, texlive-common, texlive-extra-utils, texlive-fonts-extra, texlive-fonts-extra-doc, texlive-fonts-recommended, texlive-fonts-recommended-doc, texlive-font-utils, texlive-formats-extra, texlive-games, texlive-generic-extra, texlive-generic-recommended, texlive-humanities, texlive-humanities-doc, texlive-lang-african, texlive-lang-all, texlive-lang-arabic, texlive-lang-cjk, texlive-lang-cyrillic, texlive-lang-czechslovak, texlive-lang-english, texlive-lang-european, texlive-lang-japanese, texlive-lang-chinese, texlive-lang-korean, texlive-lang-french, texlive-lang-german, texlive-lang-greek, texlive-lang-indic, texlive-lang-italian, texlive-lang-other, texlive-lang-polish, texlive-lang-portuguese, texlive-lang-spanish, texlive-latex-base, texlive-latex-base-doc, texlive-latex-extra, texlive-latex-extra-doc, texlive-latex-recommended, texlive-latex-recommended-doc, texlive-luatex, texlive-math-extra, texlive-metapost, texlive-metapost-doc, texlive-music, texlive-omega, texlive-pictures, texlive-pictures-doc, texlive-plain-extra, texlive-plain-generic, texlive-pstricks, texlive-pstricks-doc, texlive-publishers, texlive-publishers-doc, texlive-science, texlive-science-doc, texlive-xetex, thailatex, tipa, tipa-doc, xindy, xindy-rules, xmltex, asymptote, texinfoDepends: freeglut3Architecture: allDescription: My local installation of TeX Live 2018. A full &quot;vanilla&quot; TeX Live 2018 http://tug.org/texlive/debian#vanillaWindows对于 Windows 系统来说，前面的操作步骤以及下载网站同 Unix/Linux 系统下的操作步骤，同样你会得到一个 iso 镜像文件，在 Windows 8/10 系统下可以直接双击 iso 镜像文件进行挂载，Windows 7 系统以及之前版本需要用虚拟光驱软件（比如这一种）加载 iso 镜像文件。将 TeX Live 2018 的镜像挂载到系统上之后，进入这个新建的盘中，以管理员身份运行其中的脚本文件 install-tl-advanced.bat，然后点击 Continue 选项可以弹出安装界面。完成安装后为了检验是否安装成功，在 cmd 中执行命令：1tex -version相关软件配置编辑器首先要介绍的是 TeXworks，它是在 TUG 的支持下开发的一个全新的 TeX/LaTeX 编辑器，它也是 TeX Live 自带的一款编辑器，其特点有：自带了一个 PDF 阅读器，编辑 tex 文件时可以迅速预览排版后的 pdf 文件；支持直接生成并预览 pdf，避免了 dvi, ps, pdf 等各种文件格式对初学者的干扰；支持命令补全，使用方法是在输入若干首字母后按 Shift+Tab 或 Ctrl+Tab。如果有多种可能的补全方式，多按几次就会在这几种方式之间循环。按 Shift+Tab 和按 Ctrl+Tab 的循环方向相反。 启动 TeXworks 软件后就可以开始编辑文档了。然后介绍另一款跨平台编辑器 Sublime Text 的配置方法。如果是在 Windows 系统下，可以前往官网下载软件，安装完成后打开软件，依次选择 View-Show Console 选项或者是按 Ctrl+` 调出 Console 面板，输入以下代码到命令行并回车：1import urllib.request,os,hashlib; h = &apos;6f4c264a24d933ce70df5dedcf1dcaeeebe013ee18cced0ef93d5f746d80ef60&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)重启 Sublime Text，如果在 Perferences 中看到多出了 Package Control 这一选项，则说明安装成功。打开 Package Control 找到 install Package 命令，点击进入，然后在搜索框输入 LatexTools，点击后自动安装，安装成功后依次打开 Preferences-Package Settings-LatexTools-Settings User 选项，在打开的文档的括号内写入以下代码（注意 &quot;texpath&quot;、&quot;distro&quot;、&quot;sumatra&quot; 相关文件的实际安装路径需自行修改）：12345678910111213141516171819&quot;windows&quot;: &#123; // Path used when invoking tex &amp; friends; &quot;&quot; is fine for MiKTeX // For TeXlive 2011 (or other years) use // &quot;texpath&quot; : &quot;C:\\texlive\\2011\\bin\\win32;$PATH&quot;, &quot;texpath&quot; : &quot;D:\\Program Files\\Texlive\\bin\\win32;$PATH&quot;, // TeX distro: &quot;miktex&quot; or &quot;texlive&quot; &quot;distro&quot; : &quot;texlive&quot;, // Command to invoke Sumatra. If blank, &quot;SumatraPDF.exe&quot; is used (it has to be on your PATH) &quot;sumatra&quot;: &quot;D:\\Program Files\\SumatraPDF\\SumatraPDF.exe&quot;, // Command to invoke Sublime Text. Used if the keep_focus toggle is true. // If blank, &quot;subl.exe&quot; or &quot;sublime_text.exe&quot; will be used. &quot;sublime_executable&quot;: &quot;&quot;, // how long (in seconds) to wait after the jump_to_pdf command completes // before switching focus back to Sublime Text. This may need to be // adjusted depending on your machine and configuration. &quot;keep_focus_delay&quot;: 0.5 &#125;, &quot;builder&quot;: &quot;simple&quot;,完成以上步骤之后就可以正式开始编辑文档了，现在来测试一下一切准备工作是否就绪。在 View 菜单下找到 Syntax 选项，将语法换成 LaTeX，在 Tools 菜单下找到 Build System 选项，将编译系统换成 LaTeX 或者 Automatic ，然后新建一个文件，以 UTF-8 编码保存，使用 xelatex 编译：12345\documentclass[UTF8]&#123;ctexart&#125;\begin&#123;document&#125;Hello, World!你好，世界！\end&#123;document&#125;保存文件，然后按 Ctrl+B（或选择 Tools 中的 Build 选项）进行编译，这时 Sublime Text 就会自动调用 LaTeXTools 中的 Build 系统来对文件进行编译。如果编译成功，会自动打开 SumatraPDF 进行文件预览。如果是在 Unix/Linux 系统下，Sublime Text 有几种不同的安装方式可以选择，这里以 Ubuntu16.04 为例，安装方式可以参考这里。第一种方式依次执行：1234wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -sudo apt-get install apt-transport-httpsecho "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.listsudo apt update &amp;&amp; sudo apt install sublime-text第二种安装方式是在官网直接点击下载 Linux 的 64bit/32bit tarball 打包文件，下载之后解压就可以得到一个免安装版本的 Sublime Text。另外也可以通过 ppa 安装，打开终端，输入以下命令：123sudo add-apt-repository ppa:webupd8team/sublime-text-3sudo apt-get updatesudo apt-get install sublime-text-installer但是这些步骤完成之后我们的任务还没有完成，因为在 Ubuntu 下 Sublime Text 还不支持中文的输入，下面我们来配置中文输入法的支持，具体可以参考 sublime-text-imfix。终端输入：123git clone https://github.com/lyfeyaj/sublime-text-imfix.gitcd sublime-text-imfix./sublime-imfix执行完之后重启，就可以输入中文了。之后的操作和前文提到的在 Windows 系统下的操作类似，调出 Console 面板用来安装 Package Control 组件，然后打开 Package Control 安装 LatexTools，安装成功后修改其 Settings Default 文件，在打开的文档中找到 linux，修改 &quot;texpath&quot; 如下：1&quot;texpath&quot; : &quot;$PATH:/usr/local/texlive/2018/bin/x86_64-linux&quot;,同样这一过程也可以通过修改其 Settings User 文件中 linux 下的 &quot;texpath&quot; 来实现（具体代码类同 Windows 系统）。完成这些操作之后你就可以用 Sublime Text 来编辑文档了。PDF 阅读器这里只介绍 Windows 系统下配合 Sublime Text 编辑器使用的配置方式（配合其他编辑器使用的配置方式类似）。SumatraPDF 是由 Krzysztof Kowalczyk 所开发的 Windows 平台上一款轻量级 PDF 阅读器，你可以在这里下载安装包文件。安装完成后还要进行一些配置，将 SumatraPDF 的主程序目录添加到环境变量 PATH，这一步配置可以实现反向搜索功能，即重定位到 tex 文档的相应位置。有两种方式可以实现这一过程，第一种方式是在 Win 10（Win 7/8 类似）系统下打开控制面板，依次选择 系统和安全-系统-高级系统设置-环境变量-系统变量-Path-编辑-新建 选项，输入 SumatraPDF.exe 的安装路径后点击确定：1D:\Program Files\SumatraPDF\SumatraPDF然后在 cmd 下执行命令（注意 exe 文件的实际安装路径需自行修改）：1sumatrapdf.exe -inverse-search "\"D:\Program Files\Sublime Text 3\sublime_text.exe\" \"%f:%l\""另一种方式是在 SumatraPDF 软件的 菜单-设置-选项 的最后一栏里填上命令（注意 exe 文件的实际安装路径需自行修改）：1"D:\Program Files\Sublime Text 3\sublime_text.exe" "%f:%l"至此，所有配置工作完成。排版基础LaTeX 源文件是纯文本文件，扩展名为 .tex， 其基本组成为：正文、命令、注释。其中正文即需要进行写作的部分，注释以 % 开头，其内容在编译时被忽略。一个测试源文件如下：12345678910111213141516%%=============================================% 导言区。用于放置全局控制命令, 如: 调用宏包, 设置页面。\documentclass[UTF8]&#123;ctexart&#125; % 文档类型申明\title&#123;测试标题&#125; % 文档标题\author&#123;测试作者&#125; % 文档作者\date&#123;\today&#125; % 文档时间%%=============================================% 正文区\begin&#123;document&#125;\setcounter&#123;tocdepth&#125;&#123;2&#125; % 指定目录层次深度，此处取为 2\maketitle % 生成文档标题\tableofcontents % 生成目录Hello, World!你好，世界！\end&#123;document&#125;%%=============================================命令命令以 \ 开头，用来控制排版格式。其组成方式有：\ 后紧跟一串字母，区分大小写，它们以任意非字母符号（空格、数字、标点等）为结束标志；\ 后紧跟一个非字母符号。字母形式的命令忽略其后的所有空格。如果要人为引入空格，可在命令后紧跟一对括号 {} 和一个空格 ，或紧跟一个反斜线 \ 和一个空格，以阻止其忽略空格。123456\command% 无参数命令\command[optionalparameter]&#123;parameter&#125;% 有参数命令% [] 中的参数是可选参数, &#123;&#125; 中的参数是必要参数。可以有多个参数（若有多个, 用半角逗号隔开）。若省略可选参数，系统自动使用预设值。根据命令使用情况，将命令分为：用户命令，LaTeX 提供给用户使用的命令。若定义位于导言区，其作用范围为全文；若位于正文区，其作用范围仅限其后的内容。内部命令，LaTeX 内部使用的命令，可以在源文件中使用。部分内部命令在命令名中含有 @ 符号，又被称为核心命令，不能直接在源文件中使用。根据命令作用范围，将命令分为：声明形式，作用于命令后的所有相关内容，如 \bfseries 将其后所有字体设置为粗体。参数形式，作用于命令所带参数，如 \textbf{Hello} 将 {} 内字体设置为粗体。组合形式，将声明形式的命令和作用内容置于 {} 之中，可将作用范围限制在 {} 之内，如 {\bfseries Hello} 将 {} 内字体设置为粗体。环境形式，包含一对起始声明和结束声明，作用范围仅限该环境之内，环境可嵌套，外层效果可作用于内层，反之无效。用户可自定义新命令或重定义已有命令：12345678910111213141516171819202122232425262728293031323334353637383940414243% 定义新命令\newcommand&#123;cmd&#125;[num][default]&#123;definition&#125;% cmd：自定义新命令的名称，需符号命令构成规则，且不与已有命令重名。% num：用于指定新命令的参数数目，可选范围 0~9，预设值 0。% default：用于设置第一个参数的预设值。新命令中最多只能有一个可选参数，且必须是第一个参数。% definition：对新命令所执行的排版任务进行设置，涉及某个参数时用 #n 表示。% e.g.\newcommand&#123;\myca&#125;&#123;2BMelon&#125;很好，\myca&#123;&#125; 来自蓝星。\newcommand&#123;\mycb&#125;[1]&#123;\textbf&#123;#1&#125;&#125;蓝星位于 \mycb&#123;太阳系&#125;。\newcommand&#123;\mycc&#125;[2]&#123;$#1_1,#1_2,\cdots,#1_#2$&#125;太阳系有八颗行星，记为：\mycc&#123;P&#125;&#123;8&#125;。\newcommand&#123;\mycd&#125;[2][n]&#123;$#2_1,#2_2,\cdots,#2_#1$&#125;蓝星有 $n$ 颗卫星，记为：\mycd&#123;S&#125;，哦，不对，是 $m$ 颗，记为：\mycd[m]&#123;S&#125;。% 重定义已有命令\renewcommand&#123;已有命令&#125;[num][default]&#123;definition&#125;% 修改核心命令时，将 \renewcommand 命令插入在 \makeatletter 和 \makeatother 之间。% e.g.\renewcommand&#123;\baselinestretch&#125;&#123;1.2&#125;% 定义命令参数的传递。定义命令时，被定义命令的参数可作为定义内容中的命令参数。% e.g.\newcommand&#123;\myce&#125;[2]&#123;$S_#1: \textbf&#123;#2&#125;$&#125;在太阳系中蓝星记为 \myce&#123;3&#125;&#123;M34-4602151-B&#125;。% 定义命令的嵌套。定义命令可以互相嵌套，且与定义次序无关。若嵌套的定义命令均含有参数，为示区别，最外层参数用 #n 表示，第二层参数用 ##n 表示，依次类推。% e.g.\newcommand&#123;\myce&#125;[2]&#123;$S_#1: \textbf&#123;#2&#125;$&#125;% 环境\begin&#123;environmentname&#125;&#123;arguments&#125;...\end&#123;environmentname&#125;\newenvironment[name][num][default]&#123;begdef&#125;&#123;enddef&#125;\renewenvironment[name][num][default]&#123;begdef&#125;&#123;enddef&#125;% name：环境名。对于 \newenvironment，name 不能是己定义的环境名或命令名。对于 \renewenvironment，name 必须是己定义的环境。% num：1 到 9 之间的一个整数，指示所需参数数目，缺省时命令无参数。% default：若有此参数，则笫一个叁数是可选叁效，且其缺省值就是 default 值。% begdef：每当 \beginname 命令出现时用以替换的文本；#n 表示环境的一个形式叁数，替换时要用环境命令中的第 n 个实际参数的文本进行替换。% enddef：每当 \endname 命令出现时用以替换的文本，不能带任何参数。文档类型文档类型规定了 LaTeX 源文件所要生成的文档的性质：普通文章、书籍、演示文稿、个人简历等。 LaTeX 源文件的开头须用 \documentclass[options]{class} 指定文档类型，其中 class 为类型名称，options 为可选参数，参数之间用半角逗号分隔。常用文档类型：类型文件说明bookbook.cls著作、学位论文；默认有左右页区分，章起右页。reportreport.cls商业、科技、试验报告；默认无左右页区分，章起新页。articlearticle.cls短文、评论、学术论文；无左右页区分，无章设置。beamerbeamer.cls论文陈述幻灯片；提供多种主题式样，可方便更改幻灯片的整体风格。其中，book、report、article 被称为标准文档类型。对于中文写作环境，CTeX 宏集专门提供了四个中文文档类型 ctexbook、ctexrep、ctexart 和 ctexbeamer 用来替换对应的 book、report、article 和 beamer。使用时采用 UTF-8 编码保存，例如：12345\documentclass[UTF8]&#123;ctexart&#125;\begin&#123;document&#125;Hello, World!你好，世界！\end&#123;document&#125;或者继续使用标准文档类型，而在导言区中调用 CTeX 提供的中文字体宏包 ctex.sty 以添加中文支持，例如：123456\documentclass&#123;article&#125;\usepackage[UFT8]&#123;ctex&#125;begin&#123;document&#125;Hello, World!你好，世界！\end&#123;document&#125;可选参数为文档类型规定一些排版参数：选项说明10pt, 11pt, 12pt指定文档基本字号。缺省为 10pt。letterpaper, a4paper, a5paper指定纸张大小，缺省为美式信纸 letterpaper。notitlepage, titlepage指定标题命令 \maketitle 是否生成单独的标题页。article 缺省为 notitlepage，report 和book 缺省为 titlepage。onecolumn, twocolumn指定单栏/双栏排版。缺省为 onecolumn。oneside, twoside指定单面/双面排版。双面排版时，奇偶页的页眉页脚、页边距不同。article 和 report 缺省为 oneside，book 缺省为 twoside。landscape指定横向排版。缺省为纵向。openany, openright指定新的一章 \chapter 是在奇数页（右侧）开始，还是直接紧跟着上一页开始。report 缺省为 openany，book 缺省为 openright。对 article 无效。fleqn令行间公式左对齐。缺省为居中对齐。leqno将公式编号放在左边。缺省为右边。宏包在使用 LaTeX 时常需要依赖一些扩展来增强或补充 LaTeX 的功能，这些扩展称为宏包。调用宏包的方式为 \usepackage[options]{package} ，此命令只能在导言区使用。调用宏包的方式有：一次调用多个宏包，如 \usepackage{package1,package2,...}；或一次调用一个宏包，如 \usepackage{package} ，使用此方式时可以对宏包进行参数设置。部分宏包：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849\usepackage&#123;amsmath&#125; % AMS 数学公式\usepackage&#123;amssymb&#125; % AMS 数学符号\usepackage&#123;amsfonts&#125; % AMS 数学字体\usepackage&#123;amstext&#125; % 可在公式环境使用 \text&#123;&#125;\usepackage&#123;amsthm&#125; % 提供 \theoremstyle 定理样式、proof 证明环境\usepackage&#123;array&#125; % 数组和表格制作\usepackage&#123;algorithm2e&#125; % 插入算法\usepackage&#123;biblatex&#125; % 参考文献\usepackage&#123;booktabs&#125; % 绘制水平表格线\usepackage&#123;bm&#125; % 数学粗体\usepackage&#123;calc&#125; % 四则运算\usepackage&#123;caption&#125; % 插图和表格标题格式设置\usepackage&#123;changepage&#125; % 局部版心宽度调整\usepackage&#123;ctex&#125; % 中文排版\usepackage&#123;colortbl,colortab&#125; % 彩色表格设置\usepackage&#123;easy&#125; % 控制矩阵块行高平衡\usepackage&#123;faktor&#125; % 斜分数宏包\usepackage&#123;fancybox&#125; % 扩展功能的盒子\usepackage&#123;fancyvrb&#125; % 抄录格式设置\usepackage&#123;float&#125; % 设置浮动位置\usepackage&#123;indentfirst&#125; % 首段首行缩进\usepackage&#123;lipsum&#125; % 随机生成文本\usepackage&#123;longtable&#125; % 制作跨页表格\usepackage&#123;makecell&#125; % 旋转表格中的某一列标题\usepackage&#123;multirow&#125; % 跨行表格设置\usepackage&#123;multicol&#125; % 多栏排版\usepackage&#123;paralist&#125; % 多种列表环境\usepackage&#123;ragged2e&#125; % 对齐宏包\usepackage&#123;setspace&#125; % 行距宏包\usepackage&#123;siunitx&#125; % 单位制\usepackage&#123;subfig&#125; % 插入多图时子图显示\usepackage&#123;tabularx&#125; % 自动设置表格列宽\usepackage&#123;titletoc&#125; % 目录格式设置\usepackage&#123;ulem&#125; % 文字下划线\usepackage&#123;varioref&#125; % 引用宏包\usepackage&#123;varwidth&#125; % 可变宽小页\usepackage&#123;verbatim&#125; % 在文挡中直接抄录文件\usepackage&#123;xcolor&#125; % 颜色处理\usepackage&#123;tikz&#125; % 绘图宏包\usepackage&#123;pgfplots&#125; % 绘图宏包\usepackage&#123;fancyhdr,lastpage&#125; % 页眉页脚设置\usepackage&#123;geometry&#125; % 版面尺寸设置\usepackage&#123;graphicx&#125; % 插图处理\usepackage&#123;morefloats&#125; % 浮动体\usepackage&#123;framed&#125; % 边框宏包\usepackage&#123;mdframed&#125; % 绘制彩色文本框\usepackage&#123;tcolorbox&#125; % 绘制彩色文本框\usepackage&#123;listings&#125; % 代码排版\usepackage&#123;hyperref&#125; % 创建超文本链接更多宏包：LaTeX 宏包索引模式LaTeX 有三种排版模式，在编译源文件时系统处于此三种模式中的一种。左右模式，系统将其中的内容看做由单词、标点符号、空白组成的一串字符，无论字符长度是多少，系统将从左到右排版而不换行，超出行宽将提示溢出。段落模式，系统将其中的内容看做由单词、空白组成的一串字符，系统将自动对字符进分行、分段、分页处理。常规文本排版就处于这一模式。LaTeX 内部又将段落模式分为水平模式和垂直模式。数学模式，用于排版数学公式，系统将其中的字母都当做数学符号，并忽略所有符号间的空白。盒子在 LaTeX 中，字符、文字、页面、表格等都是盒子，盒子是 LaTeX 排版的基础单元，其排版过程就是在构造盒子和堆砌盒子。LaTeX 提供了一些用来生成有特定用途盒子的命令，用户可构造的盒子：LR 盒子（左右盒子）：内容只能位于同一行段落盒子：由垂直堆叠的行构成，可包含多行文本标尺盒子：一个实心矩形，通常用于画水平线或垂直线当盒子左右排列时，它们的基线在同一水平线上；当盒子上下排列时，基准点在同一垂直线上。每个盒子有三个尺寸：宽度 \width，高度 \height 和深度 \depth，高度和深度以基点（base）为界，总高度 \totalheight = \height + \depth。12345678910111213141516% 生成水平盒子\mbox&#123;...&#125;\makebox[width][align]&#123;...&#125;% 带框的水平盒子\fbox&#123;...&#125;\framebox[width][align]&#123;...&#125;% 垂直盒子\parbox[align][height][inner-align]&#123;width&#125;&#123;...&#125;\begin&#123;minipage&#125;[align][height][inner-align]&#123;width&#125;...\end&#123;minipage&#125;% 标尺盒子\rule[raise]&#123;width&#125;&#123;height&#125;常用12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849% 长度单位1mm = 2.845pt1pt ＝ 0.351mm1bp = 0.353mm1dd = 0.376mm1pc = 12pt1in = 25.4mm65536sp = 1pt1em = 当前字体中一个 M 的宽度1ex = 当前字体中一个 x 的高度% 换行, 分段, 分页% LaTeX 源文件中，空格键和 Tab 键输入的空白字符视为空格。连续的若干个空白字符视为一个空格。一行开头的空格忽略不计。行末的回车视为一个空格；但连续两个回车（即空行）会将文字分段。多个空行被视为一个空行。\\[length] % 换行。可选带参数 length，参数可正可负，用于在换行处增加垂直间距。表格、公式中可用。\newline % 只用于文本段落中换行。\newpage % 分页\clearpage % 分页\par % 用在需换行的内容前，可以将之后的内容进行换行操作。输入命令 \par\setlength\parindent&#123;&#125;，在&#123;&#125;里面输入需要缩进的长度，单位为 em，1em 代表一个缩进单位，即两个英文字母或一个汉字的长度。% 空格a\qquad b % 两个 quad 空格：两个 m 宽度a\quad b % 一个 quad 空格：一个 m 宽度a\ b % 大空格：1/3m 宽度a\;b % 中等空格：2/7m 宽度a\,b % 小空格：1/6m 宽度ab % 无空格a\!b % 紧贴：缩进 1/6m 宽度% 长度设置\hspace&#123;length&#125; % 设置增加水平距离，若要在行首行末也保持一致，使用 \hspace*&#123;length&#125;\vspace&#123;length&#125; % 设置增加段落之间距离，若此额外距离不存在页面顶部和尾部，使用 \vspace*&#123;length&#125;\vfill 相当于 \vspace&#123;\fill&#125;\smallskip \vspace&#123;\smallskipamount&#125;\medskip \vspace&#123;\medskipamount&#125;\bigskip \vspace&#123;\bigskipamount&#125;\setlength&#123;长度数据命令&#125;&#123;长度&#125;\setlength&#123;\hoffset&#125;&#123;-5mm&#125;\setlength&#123;\parindent&#125;&#123;12pt&#125; % 设置每一自然段首行的缩进量为 12pt\setlength&#123;\parskip&#125;&#123;10pt plus 1pt minus 1pt&#125; % 设置自然段之间的距离为 10pt，并可在 9pt 到 11pt 之间变化\setlength&#123;\baselineskip&#125;&#123;8pt plus1pt minus1pt&#125; % 设置行间距为 8pt，并可在 7pt 到 10pt 之间变化\addtolength&#123;长度数据命令&#125;&#123;长度&#125;\linewidth % 当前行的宽度\columnwidth % 当前分栏的宽度\textwidth % 页面版芯的宽度\paperwidth % 整个页面纸张的宽度\renewcommand&#123;\baselinestretch&#125;&#123;1.3&#125; % 行间距伸展因子\linespread&#123;1.3&#125; % 行间距伸展命令\indent % 设置缩进，此命令只有在 \parindent 不为零时有效\noindent % 设置不缩进章节文本可用通过不同的命令分割为章、节、小节。三个标准文档类 article、report、book 提供了划分章节的命令。其中 \chapter 只在 book 和 report 文档类有定义。这些命令生成章节标题，并自动编号。\part 命令可以将整个文档分割为大的分块，但不影响 \chapter 或 \section 等的编号。1234567\chapter&#123;title&#125;\section&#123;title&#125;\subsection&#123;title&#125;\subsubsection&#123;title&#125;\paragraph&#123;title&#125;\subparagraph&#123;title&#125;\part&#123;title&#125;字体LaTeX 中字体分为文本字体和数学字体，每个字体都具有 5 个属性：编码（encoding）、字族（family）、序列（series）、形状（shape）、尺寸（size）。12345678910111213141516171819202122232425262728293031323334353637383940\textrm&#123;罗马体族&#125;\textsf&#123;等线体族&#125;\texttt&#123;打字机体族&#125;\textmd&#123;常规系列&#125;\textbf&#123;加粗系列&#125;\textit&#123;意大利形状&#125;\textup&#123;直立形状&#125;\textsc&#123;小型大写形状&#125;\textsl&#123;倾斜形状&#125;\textnormal&#123;常规&#125;\emph&#123;强调&#125;\usepackage&#123;ulem&#125;\uline&#123;下划线&#125;\uuline&#123;双下划线&#125;\uwave&#123;波浪线&#125;\sout&#123;中间删除线&#125;\xout&#123;斜删除线&#125;\dashuline&#123;虚线&#125;\dotuline&#123;加点&#125;% 调用字体\usepackage&#123;fontspec&#125;\setmainfont&#123;Times New Roman&#125;\setsansfont&#123;DejaVu Sans&#125;\setmonofont&#123;Latin Modern Mono&#125;\setsansfont&#123;[foo.ttf]&#125; % 直接使用当前目录下的字体文件\setmainfont[BoldFont=&#123;...&#125;,ItalicFont=&#123;...&#125;]&#123;Times New Roman&#125;% 中文字体\setCJKmainfont[BoldFont=&#123;...&#125;,ItalicFont=&#123;...&#125;]&#123;SimSun&#125;\setCJKsansfont&#123;SimSun&#125;\setCJKmonofont&#123;SimSun&#125;\setCJKfamilyfont&#123;SimSun&#125;&#123;\kaishu 这里是楷书显示&#125;&#123;\songti 这里是宋体显示&#125;&#123;\heiti 这里是黑体显示&#125;&#123;\fangsong 这里是仿宋显示&#125;&#123;\youyuan 这里是幼圆显示&#125;&#123;\lishu 这里是隶书显示&#125;符号LaTeX 系统中将符号分为特殊符号，文本符号，数学符号。更多符号：The Com­pre­hen­sive LaTeX Sym­bol List12345678910111213141516171819% 如果想要输入以下 10 个特殊符号，需要使用带反斜线的形式输入。# \#$ \$% \%&amp; \&amp;&#123; \&#123;&#125; \&#125;_ \_^ \^~ \~\ \textbackslash% 标点符号- % hyphen-- % en-dash--- % em-dash\ldots % 省略号\dots % 省略号\cdots % 省略号颜色123456789101112131415161718192021222324\usepackage&#123;xcolor&#125; % 颜色处理% 预定义颜色：black, blue, brown, cyan, darkgray, gray, green, lightgray, lime, magenta, olive, orange, pink, purple, red, teal, violet, white, yellow.% 自定义颜色\definecolor&#123;light-gray&#125;&#123;gray&#125;&#123;0.95&#125; % 灰度\definecolor&#123;orange&#125;&#123;rgb&#125;&#123;1,0.5,0&#125; % rgb\definecolor&#123;orange&#125;&#123;RGB&#125;&#123;255,127,0&#125; % RGB\definecolor&#123;orange&#125;&#123;HTML&#125;&#123;FF7F00&#125; % HTML\definecolor&#123;orange&#125;&#123;cmyk&#125;&#123;0,0.5,1,0&#125; % cmyk% 颜色的应用\color&#123;orange&#125; % 将其后文本元素设置为橙色&#123;\color&#123;orange&#125;橙色&#125;\color&#123;blue!20!black!30!green&#125; % 0.2 blue，0.3 black and 0.5 green\color[rgb]&#123;1,0,0&#125;&#123;红色&#125;\textcolor&#123;green&#125;&#123;绿色&#125;\textcolor[rgb]&#123;0,1,0&#125;&#123;绿色&#125;\colorbox&#123;red&#125;&#123;红色&#125;\colorbox[rgb]&#123;1,0,0&#125;&#123;红色&#125;\colorbox&#123;red&#125;&#123;\color&#123;black&#125;红底黑字&#125;\fcolorbox&#123;red&#125;&#123;green&#125;&#123;红框绿背景&#125;\fcolorbox[rgb]&#123;1,0,0&#123;0,1,0&#125;红框绿背景&#125;\pagecolor&#123;orange&#125; % 设置背景色为橙色\definecolorseries&#123;色系&#125;&#123;模式&#125;&#123;last&#125;&#123;首颜色&#125;&#123;尾颜色&#125;计数器LaTeX 系统内共设置 23 个计数器，其中 17 个序号计数器，为文档中的每个章节、插图、表格、公式、页码等元素进行排序，序号计数器名称与其排序的命令名或环境名相同；6 个控制计数器，用于控制浮动体数量和目录深度。1234567891011121314151617181920212223242526% 序号计数器。enumii 和 mpfootnote 预设值为小写英文字母，enumiii 预设值为小写罗马字母，enumiv 预设值为大写英文字母，其余预设值为数字part % 部序号计数器chapter % 章序号计数器section % 节序号计数器subsection % 小节序号计数器subsubsection % 小小节序号计数器paragraph % 段序号计数器subparagraph % 小段序号计数器page % 页码计数器figure % 插图序号计数器table % 表格序号计数器equation % 公式序号计数器footnote % 脚注序号计数器mpfootnote % 小页环境中的脚注序号计数器enumi % 排序列表第 1 层序号计数器enumii % 排序列表第 2 层序号计数器enumiii % 排序列表第 3 层序号计数器enumiv % 排序列表第 4 层序号计数器% 控制计数器bottomnumber % 控制每页底部可以放置浮动体的最大数量，默认值 1dbltopnumber % 双栏排版时，控制每页顶部可放置跨栏浮动体的最大数量，默认值 2secnumdepth % 控制层次标题的排序深度，book 和 report 默认 2，article 默认 3topnumber % 控制每页顶部可放置浮动体的最大数量，默认 2totalnumber % 控制每页中可放置浮动体的最大数量，默认 4tocdepth % 控制章节目录的目录深度，文类 book 和 report 默认 2，article 默认 3部分计数器命令：1234567891011121314\arabic&#123;counter&#125; % 计数器设置为数字计数形式\alph&#123;counter&#125; % 计数器设置为小写英文字母计数形式，计数值小于 27\Alph&#123;counter&#125; % 计数器设置为大写英文字母计数形式，计数值小于 27\roman&#123;counter&#125; % 计数器设置为小写罗马字母计数形式\Roman&#123;counter&#125; % 计数器设置为小写罗马字母计数形式\fnsymbol&#123;counter&#125; % 计数器设置为脚注标识符计数形式，计数值取 1 到 9，依次对应每一种符号\addtocounter&#123;counter&#125;&#123;value&#125; % 计数器 counter 值增加 value 大小，va1ue 可以为负\newcounter&#123;new&#125;[counter] % 创建新计数器 new，其初始值为 0，可选参数 counter 为另一计数器，比 new 高一级，每当 counter 的值增加时，new 计数器被复位\setcounter&#123;counter&#125;&#123;value&#125; % 计数器 counter 值设置为 value\stepcounter&#123;counter&#125; % 计数器 counter 值加 1，同时复位其所有下层计数器\refstepcounter&#123;counter&#125; %除完成 \stepcounter 命令的功能外，将该计数器当前值作为其后书签命令 \label 的值，可在任何位置使用 \ref 命令引用该计数器当前值\usecounter&#123;counter&#125; % 专用于 list 环境，指明用 counter 作为 list 列表项的计数器\value&#123;counter&#125; % 获取计数器 counter 的当前值\renewcommand&#123;\thechapter&#125;&#123;\Roman&#123;chapter&#125;&#125; % 重新定义序号计数器的计数形式，章节序号计数器改为大写罗马数字计数形式单位1234567891011121314151617181920\usepackage&#123;siunitx&#125;\ang[options]&#123;angle&#125;\num[options]&#123;number&#125;\si[options]&#123;unit&#125;\SI[options]&#123;number&#125;[pre-unit]&#123;unit&#125;\numlist[options]&#123;numbers&#125;\numrange[options]&#123;numbers&#125;&#123;number2&#125;\SIlist[options]&#123;numbers&#125;&#123;unit&#125;\SIrange[options]&#123;number1&#125;&#123;number2&#125;&#123;unit&#125;\sisetup&#123;options&#125;\tablenum[options]&#123;number&#125;\ampere %ampere A\candela %candela cd\kelvin %kelvin K\kilogram %kilogram kg\metre %metre m\mole %mole mol\second %second s数学公式数学公式有两种排版方式：一是与文字混排的行内公式；二是单独列为一行的行间公式。行内公式由一对 $ 符号包裹，单独成行的行间公式有多种实现方式：12345678910111213141516171819202122232425\begin&#123;displaymath&#125;% 不带编号的单行公式数学环境\end&#123;displaymath&#125;\[% displaymath 环境的简化形式\]$$ $$\begin&#123;equation&#125;% 带自动编号的单行公式数学环境\end&#123;equation&#125;\begin&#123;equation*&#125;% 不带自动编号的单行公式数学环境\end&#123;equation*&#125;\begin&#123;align&#125;% 多行对齐公式数学环境\end&#123;align&#125;\begin&#123;gather&#125;% 多行居中公式数学环境\end&#123;gather&#125;一些有用的工具：Mathpix：图片转 LaTeX 公式MyScript：手写体转 LaTeX 公式在线公式编辑绘图123456\usepackage&#123;tikz&#125;\usepackage&#123;pgfplots&#125;\begin&#123;tikzpicture&#125;[...]...\end&#123;tikzpicture&#125;一些可能会用到的工具：TikzEdt：一款所见即所得的 TiKZ 编辑器，支持 TikZ 图形的实时编译预览。GeoGebra：支持将绘制的平面函数图形导出为 TikZ 格式。Dia：一款基于 GTK 的矢量图形绘制程序，主要用来画流程图，支持直接导出为 TikZ 格式。Inkscape：矢量绘图软件，支持矢量图导出为 LaTeX 格式。模板一个小小的建议是当你了解一定的基础知识之后就停下来，找到一个合适的模板然后开始写作，这可以使你更专注于你的写作内容。当然，如果你有兴趣和时间，也可以设计自己的模板。这里提供了一些获取模板的方式：LaTeX templatesTemplatesTeX 模板ShareLaTeX参考资料TeX-Beauty and Fun一份其实很短的 LaTeX 入门文档TeX Live 指南-2018Linux 系统下原版 Texlive 2016 的安装与配置Comprehensive TeX Archive Network（CTAN）LaTeX 编辑部A Not So Short Introduction to LaTeXe（中文版）The LaTeX CompanionTeX - LaTeX Stack ExchangeLaTeX 科技排版Update 2019/03/28Update 2019/02/20Update 2018/08/05]]></content>
      <categories>
        <category>Wiki</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于 GitHub Pages + Hexo 搭建个人网站]]></title>
    <url>%2F2019%2F01%2F27%2FTechnology-GitHubPages%2BHexo_build_blog%2F</url>
    <content type="text"><![CDATA[简单记录一下搭建网站的基本流程，测试环境为：OS: Windows 10Node.js: v10.15.0Git: v2.20.1npm: v6.4.1Hexo: v3.8.0Theme: NexT.Gemini v6.7.0Time: 2019/01/24前期准备开始之前可以先浏览一遍 Hexo 的官方文档。然后进行操作：安装 Git安装 Node.js安装完成后打开 cmd，执行以下命令，查看软件是否安装成功，若返回版本号则安装成功：12git --versionnode -v正式开始本地安装 Hexo在任意目录下新建一个用来存放搭建网站相关文件的文件夹（可命名为，如 Blog），进入 ~/Blog 目录，空白处右键单击，选择 Git Bash Here 进入 Shell，依次执行命令：~/Blog12345npm install -g hexo-clihexo init hexocd hexonpm installhexo generate然后执行命令以启动服务器：~/Blog1hexo server打开浏览器，在地址栏输入 http://localhost:4000/ 即可看到初始化的 Hexo 网站页面，按 Ctrl+C 可关闭服务器。将 Hexo 部署到 GitHub PagesGitHub Pages 是开源协作社区 GitHub 提供的一个服务。登录你的 GitHub 账号，新建一个名称为 username.github.io 的 repository（必须严格按此格式命名，username 是你注册 GitHub 的账号名）。接下来配置 Git 个人信息，进入 ~/Blog 目录，同样使用 Git Bash Here 进入 Shell，执行命令（注意修改 username 和 useremail 为你的账号名和邮箱）：~/Blog12git config --global user.name "username"git config --global user.email "useremail"生成 SSH Key，执行以下命令，这时会有输入密码的提示，此密码会在之后提交项目时使用。若此处不设置密码，则提交项目时不用输入密码。若不设置密码，一直按回车键完成操作即可：~/Blog1ssh-keygen -t rsa -C "useremail"SSH Key 生成之后默认保存在 C:/Users/username/.ssh 目录下（其中的 id_rsa 文件是私钥，id_rsa.pub 文件是公钥），进入该目录，打开 id_rsa.pub 文件，复制其中的密钥。网页登录 GitHub 后点击头像，依次选择 Settings、SSH and GPG keys、New SSH key，将密钥粘贴到 Key 输入框中，点击 Add Key，至此 SSH Key 配置成功。然后测试 SSH 是否添加成功，在 Shell 中执行命令：~/Blog1ssh -T git@github.com出现确认信息后输入 yes 然后回车。打开 ~/Blog/hexo 目录下的 _config.yml 站点配置文件进行网站配置（注意修改 username，以及每一项参数的冒号符后均有一个空格符），这里只列出最后一项配置（其他配置请参考这里）：~/Blog/hexo/_config.yml12345deploy: type: git repository: git@github.com:username/username.github.io.git branch: master message:在站点文件夹根目录，即 ~/Blog/hexo 目录下安装 Git 部署插件，然后将本地 Hexo 项目托管到 GitHub 上，在 Shell 中执行命令：~/Blog/hexo12npm install hexo-deployer-git --savehexo c &amp;&amp; hexo g &amp;&amp; hexo d在浏览器地址栏输入 https://username.github.io，这时可以看到网站已经部署到 GitHub 上，可以正常访问。到这里网站已初步搭建完成，下面简单介绍如何创建新的文章页面，首先在 Shell 中执行命令：~/Blog/hexo1hexo new "title"其中的 title 为文件名，然后你可以在 ~/Blog/hexo/source/_posts 目录下找到文件 title.md（另一种创建文章页面的方式是直接在该目录下新建文件 title.md），使用相应的文本编辑器打开此文件并使用 Markdown 语法编写文件内容。有关于 Markdown 语法说明以及相关软件请参考：Markdown 编辑器语法指南John Gruber 的 Markdown 语法说明Windows 平台：Typora、MarkdownPad 2Mac 平台：Typora、MouLinux 平台：TyporaWeb 平台：作业部落、StackEdit当 title.md 文件里的内容写好之后，在 Shell 中执行命令，将网站部署到 GitHub 上：~/Blog/hexo1hexo c &amp;&amp; hexo g &amp;&amp; hexo d更换 Hexo 主题Hexo 默认的主题功能较少，你可以选择其他功能丰富而且美观的主题（在这里查看），安装主题的方式很简单, 只需要将主题文件拷贝至 ~/Blog/hexo/themes 目录下, 然后修改相关配置文件即可。例如，选择 NexT 主题（使用说明），你可以前往此主题的 GitHub 页面，选择 Clone or Download 下载主题，或者使用 Shell 命令来完成操作：~/Blog/hexo12cd themesgit clone https://github.com/theme-next/hexo-theme-next.git安装完成后，将 hexo-theme-next 改名为 next，然后打开 _config.yml 站点配置文件, 找到 theme 字段, 将其值更改为 next 即可：~/Blog/hexo/_config.yml1theme: next然后进入 ~/Blog/hexo/themes/next 目录，打开 _config.yml 主题配置文件（注意和站点配置文件进行区分）进行相关配置，具体操作可以参考这里。这里列出了其他一些主题：https://github.com/forsigner/fexohttps://github.com/ahonn/hexo-theme-evenhttps://github.com/xaoxuu/hexo-theme-material-xhttps://github.com/honjun/hexo-theme-sakura进阶操作自定义模板由于后续操作较复杂，这里直接给出一些链接（以及网站搭建过程中的参考资料）：打造个性超赞博客 Hexo+NexT+GitHubPages 的超深度优化离 Hexo 博客搭建只差一个教程（三）：第三方服务——ValineHexo Next 博客自定义配置Hexo 搭建的 GitHub 博客之优化大全Windows 下 Hexo 博客 Next 主题完善Hexo 瞎折腾系列(5) - 使用 hexo-neat 插件压缩页面静态资源Hexo 优化汇总一个小小的建议是尽量不要直接修改网站配置的源代码，你可以将所有修改都写入文件 ~/Blog/hexo/themes/next/source/css/_custom/custom.styl，这样便于以后查找修改位置以及进行其他操作。当然，如果你觉得进行这些配置修改也没啥意思，可以尝试自己动手造轮子。此外，注意及时备份文件。Hexo 常用命令~/Blog/hexo1234567891011121314151617181920212223hexo server# 运行本地服务器，可简写为 hexo shexo clean# 清除缓存文件 db.json 和已生成的静态文件 public，当 source 文件夹中的部分资源更改后，需要执行此命令，然后重新编译，可简写为 hexo chexo generate# 将数据和界面相结合生成网站静态文件到默认设置的 public 文件夹，可简写为 hexo ghexo deploy# 部署文件，主要是根据在 _config.yml 中配置的 Git 仓库地址，将 public 文件上传至 GitHub，然后根据 GitHub 提供的 Pages 服务呈现出页面，可简写为 hexo dhexo new "title"# 新建文章，将会在 _post 文件夹下自动新建相应文件hexo hew page "title"# 新建菜单，将会在 source 文件夹下自动新建相应文件夹和文件npm install xxx –save# hexo 安装 xxx 插件npm uninstall xxx# hexo 卸载 xxx 插件工具LeanCloudValine七牛云Hexo 插件Revolver MapsEmojiemojicopy颜文字Font AwesomeFavicon Generator图标转换SM.MS 图床PicGo 图床插件hexo-deployer-githexo-generator-indexhexo-generator-archivehexo-mathhexo-generator-searchdbhexo-generator-feedhexo-generator-sitemaptheme-next-pacehexo-wordcounthexo-symbols-count-timehexo-helper-live2dtheme-next-needmoreshare2theme-next-fancybox3hexo-tag-aplayerhexo-tag-dplayerhexo-neathexo-filter-flowcharthexo-referencehexo-renderer-markdown-itUpdate 2019/03/20Update 2019/01/27]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>GitHub</tag>
        <tag>Git</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
